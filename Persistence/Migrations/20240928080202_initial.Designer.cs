// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Context;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(ECommerceDbContext))]
    [Migration("20240928080202_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Kozmetik ürünleri kategorisi",
                            Name = "Kozmetik"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Cilt bakım ürünleri kategorisi",
                            Name = "Cilt Bakım"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BillingAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BillingAddress = "1234 Any St.",
                            ShippingAddress = "1234 Any St.",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            BillingAddress = "4321 Ny St.",
                            ShippingAddress = "4321 Ny St.",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.OperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 9, 28, 11, 2, 2, 204, DateTimeKind.Local).AddTicks(7163),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 9, 28, 11, 2, 2, 204, DateTimeKind.Local).AddTicks(7171),
                            Name = "Customer"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 9, 28, 11, 2, 2, 204, DateTimeKind.Local).AddTicks(7219),
                            Name = "Guest"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderDetailId")
                        .HasColumnType("int");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderStatusId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 1,
                            OrderDate = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderDetailId = 0,
                            OrderStatusId = 1,
                            PaymentId = 1,
                            TotalAmount = 0m
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 2,
                            OrderDate = new DateTime(2024, 2, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderDetailId = 0,
                            OrderStatusId = 2,
                            PaymentId = 2,
                            TotalAmount = 7m
                        });
                });

            modelBuilder.Entity("Domain.Entities.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OrderId = 1,
                            Price = 100m,
                            ProductId = 1,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 2,
                            OrderId = 2,
                            Price = 200m,
                            ProductId = 2,
                            Quantity = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("OrderStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Beklemede",
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Onaylandı",
                            Name = "Confirmed"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Kargoya Verildi",
                            Name = "Shipped"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Teslim Edildi",
                            Name = "Delivered"
                        },
                        new
                        {
                            Id = 5,
                            Description = "İptal Edildi",
                            Name = "Cancelled"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("Payment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 500m,
                            OrderId = 1,
                            PaymentDate = new DateTime(2024, 9, 28, 11, 2, 2, 204, DateTimeKind.Local).AddTicks(6571),
                            PaymentMethodId = 1
                        },
                        new
                        {
                            Id = 2,
                            Amount = 200m,
                            OrderId = 2,
                            PaymentDate = new DateTime(2024, 9, 28, 11, 2, 2, 204, DateTimeKind.Local).AddTicks(6593),
                            PaymentMethodId = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethod");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Kredi Kartı İle Ödeme",
                            Name = "Credit Card"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Havale/EFT İle Ödeme",
                            Name = "Wire Transfer/EFT"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Mobil Ödeme",
                            Name = "Mobile Payment"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Kapıda Ödeme",
                            Name = "Payment At Door"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "Description",
                            ImageUrl = "https://images.pexels.com/photos/4938197/pexels-photo-4938197.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1",
                            Name = "Eyeliner",
                            Price = 500m,
                            StockQuantity = 10
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            Description = "Description",
                            ImageUrl = "https://images.pexels.com/photos/9748717/pexels-photo-9748717.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1",
                            Name = "C Vitaminli Krem",
                            Price = 300m,
                            StockQuantity = 5
                        });
                });

            modelBuilder.Entity("Domain.Entities.ProductReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Review")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductReviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 1,
                            ProductId = 1,
                            Rating = 5,
                            Review = "Bu eyeliner harikaa!",
                            ReviewDate = new DateTime(2024, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 2,
                            ProductId = 2,
                            Rating = 5,
                            Review = "Bu ruj harikaa!",
                            ReviewDate = new DateTime(2024, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Domain.Entities.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("ShoppingCarts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 1
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.ShoppingCartDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ShoppingCartId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("ShoppingCartDetail");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Price = 500.0,
                            ProductId = 1,
                            Quantity = 1,
                            ShoppingCartId = 1
                        },
                        new
                        {
                            Id = 2,
                            Price = 300.0,
                            ProductId = 2,
                            Quantity = 2,
                            ShoppingCartId = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 9, 28, 8, 2, 2, 204, DateTimeKind.Utc).AddTicks(5341),
                            Email = "customer1@example.com",
                            FirstName = "+2vS9SiEjuEtdomA+E1iOw==",
                            Gender = "Famela",
                            IsDeleted = false,
                            LastName = "evKlCl7mIBJkEqQf5ueGMg==",
                            PasswordHash = new byte[] { 25, 181, 68, 152, 64, 10, 179, 125, 56, 74, 250, 174, 216, 224, 249, 138, 154, 115, 170, 37, 26, 136, 193, 246, 171, 232, 66, 153, 45, 1, 97, 126, 228, 137, 249, 182, 75, 70, 24, 118, 195, 113, 226, 49, 221, 152, 139, 210, 64, 43, 231, 173, 254, 145, 69, 106, 78, 73, 250, 155, 50, 15, 79, 154 },
                            PasswordSalt = new byte[] { 173, 177, 173, 115, 98, 73, 231, 150, 140, 200, 206, 28, 74, 36, 242, 204, 232, 188, 172, 116, 223, 81, 202, 219, 232, 43, 27, 148, 35, 82, 168, 47, 176, 196, 179, 243, 217, 160, 229, 85, 188, 156, 229, 113, 252, 135, 254, 116, 51, 85, 19, 146, 106, 195, 227, 242, 228, 104, 43, 198, 70, 142, 53, 90, 102, 179, 201, 45, 104, 150, 235, 234, 176, 103, 121, 99, 214, 138, 193, 29, 33, 5, 60, 154, 195, 117, 232, 204, 12, 97, 92, 208, 221, 41, 137, 121, 195, 28, 155, 161, 80, 120, 174, 110, 3, 6, 79, 33, 123, 213, 245, 17, 243, 5, 62, 243, 127, 50, 15, 159, 141, 224, 10, 73, 244, 197, 232, 93 },
                            PhoneNumber = "1234567890",
                            UserType = 2
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 9, 28, 8, 2, 2, 204, DateTimeKind.Utc).AddTicks(5504),
                            Email = "customer2@example.com",
                            FirstName = "lx191yNB5UTgUeNqX1QIZQ==",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "ESeBAof1D3qOrdvr0NsjqQ==",
                            PasswordHash = new byte[] { 25, 181, 68, 152, 64, 10, 179, 125, 56, 74, 250, 174, 216, 224, 249, 138, 154, 115, 170, 37, 26, 136, 193, 246, 171, 232, 66, 153, 45, 1, 97, 126, 228, 137, 249, 182, 75, 70, 24, 118, 195, 113, 226, 49, 221, 152, 139, 210, 64, 43, 231, 173, 254, 145, 69, 106, 78, 73, 250, 155, 50, 15, 79, 154 },
                            PasswordSalt = new byte[] { 173, 177, 173, 115, 98, 73, 231, 150, 140, 200, 206, 28, 74, 36, 242, 204, 232, 188, 172, 116, 223, 81, 202, 219, 232, 43, 27, 148, 35, 82, 168, 47, 176, 196, 179, 243, 217, 160, 229, 85, 188, 156, 229, 113, 252, 135, 254, 116, 51, 85, 19, 146, 106, 195, 227, 242, 228, 104, 43, 198, 70, 142, 53, 90, 102, 179, 201, 45, 104, 150, 235, 234, 176, 103, 121, 99, 214, 138, 193, 29, 33, 5, 60, 154, 195, 117, 232, 204, 12, 97, 92, 208, 221, 41, 137, 121, 195, 28, 155, 161, 80, 120, 174, 110, 3, 6, 79, 33, 123, 213, 245, 17, 243, 5, 62, 243, 127, 50, 15, 159, 141, 224, 10, 73, 244, 197, 232, 93 },
                            PhoneNumber = "1234512345",
                            UserType = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 9, 28, 8, 2, 2, 204, DateTimeKind.Utc).AddTicks(5610),
                            Email = "guest1@example.com",
                            FirstName = "XsKf4aJaXsFVtCmJtPLh9A==",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "jp8wRnLaDCWzCeqYjo2dOQ==",
                            PasswordHash = new byte[] { 25, 181, 68, 152, 64, 10, 179, 125, 56, 74, 250, 174, 216, 224, 249, 138, 154, 115, 170, 37, 26, 136, 193, 246, 171, 232, 66, 153, 45, 1, 97, 126, 228, 137, 249, 182, 75, 70, 24, 118, 195, 113, 226, 49, 221, 152, 139, 210, 64, 43, 231, 173, 254, 145, 69, 106, 78, 73, 250, 155, 50, 15, 79, 154 },
                            PasswordSalt = new byte[] { 173, 177, 173, 115, 98, 73, 231, 150, 140, 200, 206, 28, 74, 36, 242, 204, 232, 188, 172, 116, 223, 81, 202, 219, 232, 43, 27, 148, 35, 82, 168, 47, 176, 196, 179, 243, 217, 160, 229, 85, 188, 156, 229, 113, 252, 135, 254, 116, 51, 85, 19, 146, 106, 195, 227, 242, 228, 104, 43, 198, 70, 142, 53, 90, 102, 179, 201, 45, 104, 150, 235, 234, 176, 103, 121, 99, 214, 138, 193, 29, 33, 5, 60, 154, 195, 117, 232, 204, 12, 97, 92, 208, 221, 41, 137, 121, 195, 28, 155, 161, 80, 120, 174, 110, 3, 6, 79, 33, 123, 213, 245, 17, 243, 5, 62, 243, 127, 50, 15, 159, 141, 224, 10, 73, 244, 197, 232, 93 },
                            PhoneNumber = "2568947898",
                            UserType = 3
                        },
                        new
                        {
                            Id = 99,
                            CreatedDate = new DateTime(2024, 9, 28, 8, 2, 2, 204, DateTimeKind.Utc).AddTicks(5767),
                            Email = "admin1@example.com",
                            FirstName = "aNbdnOzUNuGnMPCOxe7GbA==",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "zWkKiFF1SEkTjhIMvlgAfg==",
                            PasswordHash = new byte[] { 25, 181, 68, 152, 64, 10, 179, 125, 56, 74, 250, 174, 216, 224, 249, 138, 154, 115, 170, 37, 26, 136, 193, 246, 171, 232, 66, 153, 45, 1, 97, 126, 228, 137, 249, 182, 75, 70, 24, 118, 195, 113, 226, 49, 221, 152, 139, 210, 64, 43, 231, 173, 254, 145, 69, 106, 78, 73, 250, 155, 50, 15, 79, 154 },
                            PasswordSalt = new byte[] { 173, 177, 173, 115, 98, 73, 231, 150, 140, 200, 206, 28, 74, 36, 242, 204, 232, 188, 172, 116, 223, 81, 202, 219, 232, 43, 27, 148, 35, 82, 168, 47, 176, 196, 179, 243, 217, 160, 229, 85, 188, 156, 229, 113, 252, 135, 254, 116, 51, 85, 19, 146, 106, 195, 227, 242, 228, 104, 43, 198, 70, 142, 53, 90, 102, 179, 201, 45, 104, 150, 235, 234, 176, 103, 121, 99, 214, 138, 193, 29, 33, 5, 60, 154, 195, 117, 232, 204, 12, 97, 92, 208, 221, 41, 137, 121, 195, 28, 155, 161, 80, 120, 174, 110, 3, 6, 79, 33, 123, 213, 245, 17, 243, 5, 62, 243, 127, 50, 15, 159, 141, 224, 10, 73, 244, 197, 232, 93 },
                            PhoneNumber = "1234512345",
                            UserType = 1
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserOperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OperationClaimId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OperationClaimId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOperations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 9, 28, 11, 2, 2, 204, DateTimeKind.Local).AddTicks(7418),
                            OperationClaimId = 1,
                            UserId = 99
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 9, 28, 11, 2, 2, 204, DateTimeKind.Local).AddTicks(7424),
                            OperationClaimId = 2,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 9, 28, 11, 2, 2, 204, DateTimeKind.Local).AddTicks(7429),
                            OperationClaimId = 3,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 9, 28, 11, 2, 2, 204, DateTimeKind.Local).AddTicks(7433),
                            OperationClaimId = 3,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("Domain.Entities.Customer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.OrderStatus", "OrderStatus")
                        .WithMany()
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("OrderStatus");
                });

            modelBuilder.Entity("Domain.Entities.OrderDetail", b =>
                {
                    b.HasOne("Domain.Entities.Order", "Order")
                        .WithMany("OrderDetail")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entities.Payment", b =>
                {
                    b.HasOne("Domain.Entities.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Domain.Entities.ProductReview", b =>
                {
                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany("ProductReviews")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany("ProductReviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entities.ShoppingCart", b =>
                {
                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithOne("ShoppingCart")
                        .HasForeignKey("Domain.Entities.ShoppingCart", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Entities.ShoppingCartDetail", b =>
                {
                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ShoppingCart", "ShoppingCart")
                        .WithMany("ShoppingCartDetails")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("Domain.Entities.UserOperationClaim", b =>
                {
                    b.HasOne("Domain.Entities.OperationClaim", "OperationClaim")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("OperationClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationClaim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ProductReviews");

                    b.Navigation("ShoppingCart")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.OperationClaim", b =>
                {
                    b.Navigation("UserOperationClaims");
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderDetail");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Domain.Entities.PaymentMethod", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Navigation("ProductReviews");
                });

            modelBuilder.Entity("Domain.Entities.ShoppingCart", b =>
                {
                    b.Navigation("ShoppingCartDetails");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Customer")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
